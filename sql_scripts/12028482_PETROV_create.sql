DROP TABLE OrderContent;
------------------------------------------------------------------------------
DROP TABLE Orders;
------------------------------------------------------------------------------
DROP TABLE PizzaIngredient;
------------------------------------------------------------------------------
DROP TABLE Ingredient;
------------------------------------------------------------------------------
DROP TABLE Pizza;
------------------------------------------------------------------------------
DROP TABLE Workplace;
------------------------------------------------------------------------------
DROP TABLE Employee;
------------------------------------------------------------------------------
DROP TABLE Customer;
------------------------------------------------------------------------------
DROP TABLE Person;
------------------------------------------------------------------------------
DROP TABLE Pizzeria;
------------------------------------------------------------------------------







CREATE TABLE Pizzeria (
pizzeriaId INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 CONSTRAINT pizzeria_PK PRIMARY KEY,
pizzeriaName VARCHAR(64) CONSTRAINT pizzeria_name_nn NOT NULL,
ZIP VARCHAR(16) CONSTRAINT pizzeria_zip_nn NOT NULL,
street VARCHAR(32) CONSTRAINT pizzeria_street_nn NOT NULL
);
------------------------------------------------------------------------------
CREATE Table Person (
pID INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 CONSTRAINT person_PK PRIMARY KEY,
surname VARCHAR(255) CONSTRAINT person_surname_nn NOT NULL,
lastname VARCHAR(255) CONSTRAINT person_lastname_nn NOT NULL
);
------------------------------------------------------------------------------
CREATE TABLE Customer (
cID INTEGER CONSTRAINT customer_PK PRIMARY KEY,
TelephoneNumber VARCHAR(32),
CONSTRAINT customer_FK FOREIGN KEY(cID) REFERENCES Person
);
------------------------------------------------------------------------------
CREATE TABLE Employee (
eID INTEGER CONSTRAINT emp_PK PRIMARY KEY,
startDate DATE,
salary NUMBER(6,2) CONSTRAINT emp_salary_nn NOT NULL,
bID INTEGER,
CONSTRAINT emp_eID_FK FOREIGN KEY(eID) REFERENCES Person,
CONSTRAINT emp_bID_FK FOREIGN KEY(bID) REFERENCES Employee
);
------------------------------------------------------------------------------
CREATE TABLE Workplace (
empId INTEGER CONSTRAINT Workplace_PK PRIMARY KEY,
workplaceId INTEGER,
CONSTRAINT workplace_emp_FK FOREIGN KEY(empId) REFERENCES Employee,
CONSTRAINT workplace_piz_FK FOREIGN KEY(workplaceId) REFERENCES Pizzeria
);
------------------------------------------------------------------------------
CREATE TABLE Pizza (
pizzaName VARCHAR(32) CONSTRAINT pizza_PK PRIMARY KEY,
price NUMBER(4,2) CONSTRAINT pizza_price_nn NOT NULL
);
------------------------------------------------------------------------------
CREATE TABLE Ingredient (
ingredientId INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1 CONSTRAINT ingredient_PK PRIMARY KEY,
name varchar(128) CONSTRAINT ingredient_name_nn NOT NULL
);
------------------------------------------------------------------------------
CREATE TABLE PizzaIngredient (
pizName VARCHAR(32) CONSTRAINT pizzaIngredient_pizName_FK REFERENCES Pizza,
ingredientNr INTEGER CONSTRAINT pizzaIngredient_ingrNr_FK REFERENCES Ingredient,
CONSTRAINT pizzaIngredient_PK PRIMARY KEY(pizName, ingredientNr)
);
------------------------------------------------------------------------------
CREATE TABLE Orders (
orderID INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
customerID INTEGER CONSTRAINT order_customerID_FK REFERENCES Customer,
orderDate DATE,
CONSTRAINT order_PK PRIMARY KEY(orderId, customerID)
);
------------------------------------------------------------------------------
CREATE TABLE OrderContent(
ordID INTEGER,
custId INTEGER,
orderedPizza VARCHAR(32) CONSTRAINT orderContent_orderedPizza_FK REFERENCES Pizza,
ammount INTEGER CONSTRAINT orderContent_ammount_nn NOT NULL,
CONSTRAINT orderContent_PK PRIMARY KEY(ordID, custId, orderedPizza),
CONSTRAINT orderContent_orders_FK FOREIGN KEY(ordId, custId) REFERENCES Orders
);



CREATE OR REPLACE PROCEDURE decreaseSalary (
	in_id IN employee.eID%TYPE,
	in_percent IN NUMBER,
	nrows OUT INTEGER
) 
AS
	BEGIN 
		UPDATE Employee
		SET salary = salary - salary * in_percent / 100
		WHERE Employee.eID = in_id;
		
		nrows := SQL%ROWCOUNT;
		IF (nrows > 0)
		THEN
			COMMIT;
		ELSE
			ROLLBACK;
		END IF;
		EXCEPTION
		WHEN OTHERS
		THEN
			nrows := SQLCODE;
	END decreaseSalary; 
/



CREATE OR REPLACE TRIGGER emp_change_salary
AFTER UPDATE ON Employee
FOR EACH ROW
BEGIN
	IF :NEW.salary < :OLD.salary * 0.5 THEN
		RAISE_APPLICATION_ERROR(-20500, 'Cannot decrease employees salary with 50 or more percent!');
	END IF;
END;